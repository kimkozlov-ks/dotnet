@using DataModel.Models;

<h2>Home</h2>


<div class="form-check form-group">
    <input class="form-check-input" type="checkbox" id="checkboxPhone" value="option1">
    <label class="form-check-label" for="inlineCheckbox1">Enable/disable column "Phone"</label>
</div>
<div class="form-check form-group">
    <input class="form-check-input" type="checkbox" id="checkboxGender" value="option2">
    <label class="form-check-label" for="checkboxGender">Enable/disable column "Gender"</label>
</div>
<div class="form-check form-group">
    <input class="form-check-input" type="checkbox" id="checkboxCity" value="option3">
    <label class="form-check-label" for="checkboxGender">Enable/disable column "City"</label>
</div>
<div class="form-check form-group">
    <input class="form-check-input" type="checkbox" id="checkboxStreet" value="option4">
    <label class="form-check-label" for="checkboxGender">Enable/disable column "Street"</label>
</div>
<div class="form-check form-group">
    <input class="form-check-input" type="checkbox" id="checkboxEmail" value="option5">
    <label class="form-check-label" for="checkboxGender">Enable/disable column "Email"</label>
</div>

<script src="~/js/SettingsComponent.js"></script>

@(Html.DevExtreme().DataGrid<User>()
        .ShowBorders(true)
        .DataSource(d => d.Mvc().Controller("DataGrid").LoadAction("Get").Key("Phone"))
        .Columns(columns =>
        {
            columns.AddFor(m => m.Picture).Width(60)
            .AllowFiltering(false)
            .AllowSorting(false)
            .CellTemplate(@<text>
                    <div>
                        <img src="<%- value %>" alt="" />
                    </div>
                    </text>); ;
             columns.AddFor(m => m.Name);
             columns.AddFor(m => m.Gender);
             columns.AddFor(m => m.Phone);
         })
        .Paging(p => p.PageSize(25))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(f => f.Visible(true))
        .GroupPanel(p => p.Visible(true))
        .StateStoring(s => s
        .Enabled(true)
        .Type(StateStoringType.LocalStorage)
        .StorageKey("storage"))
        .Grouping(g => g.AutoExpandAll(true))
        .RemoteOperations(true)
        .ColumnAutoWidth(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
        totalItems.AddFor(m => m.Phone).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems =>
        {
        groupItems.Add().SummaryType(SummaryType.Count);
        })
        )
        .MasterDetail(md =>
                     {
         md.Enabled(true);
         md.Template(@<text>
                            @(Html.DevExtreme().DataGrid<User>()
                               .ColumnAutoWidth(true)
                               .ShowBorders(true)
                               .Columns(columns =>
                                               {
                                   columns.AddFor(m => m.City);

                                   columns.AddFor(m => m.Street);

                                   columns.AddFor(m => m.Email);

                                   columns.Add()
                                       .Caption("Completed")
                                       .DataType(GridColumnDataType.Boolean)
                                       .CalculateCellValue(@"function(rowData) { return rowData.Status == ""Completed""; }");
                               })
                               .DataSource(d => d.Mvc()
                                   .Controller("MasterDetail")
                                   .LoadAction("GetDetails")
                                   .LoadParams(new { phone = new JS("data.Phone") })
                               )
                            ) </text>);
    })
)





